
004Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000194  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000358  08000360  00010360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000358  08000358  00010360  2**0
                  CONTENTS
  4 .ARM          00000000  08000358  08000358  00010360  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000358  08000360  00010360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000358  08000358  00010358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000360  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000360  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010360  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000013e  00000000  00000000  0001038a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000a3  00000000  00000000  000104c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  000105b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f02  00000000  00000000  000105e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000042f  00000000  00000000  000114ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003b12  00000000  00000000  00011919  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001542b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  000154a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000340 	.word	0x08000340

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000340 	.word	0x08000340

08000204 <main>:
#endif

#import <stdint.h>

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af00      	add	r7, sp, #0
	uint32_t *pRCCAhb1EnReg = (uint32_t*) 0x40023830;
 800020a:	4b22      	ldr	r3, [pc, #136]	; (8000294 <main+0x90>)
 800020c:	617b      	str	r3, [r7, #20]
	uint32_t *pGPIOAModeReg = (uint32_t*) 0x40020000;
 800020e:	4b22      	ldr	r3, [pc, #136]	; (8000298 <main+0x94>)
 8000210:	613b      	str	r3, [r7, #16]
	uint32_t *pGPIOAOutDataReg = (uint32_t*) 0x40020014;
 8000212:	4b22      	ldr	r3, [pc, #136]	; (800029c <main+0x98>)
 8000214:	60fb      	str	r3, [r7, #12]
	*pRCCAhb1EnReg |= 0x01;
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 0201 	orr.w	r2, r3, #1
 800021e:	697b      	ldr	r3, [r7, #20]
 8000220:	601a      	str	r2, [r3, #0]
	uint32_t maskClear = 0xFFFFF3FF;
 8000222:	f46f 6340 	mvn.w	r3, #3072	; 0xc00
 8000226:	60bb      	str	r3, [r7, #8]
	uint32_t maskSet = 0x00000400;
 8000228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022c:	607b      	str	r3, [r7, #4]
	*pGPIOAModeReg &= maskClear;
 800022e:	693b      	ldr	r3, [r7, #16]
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	401a      	ands	r2, r3
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	601a      	str	r2, [r3, #0]
	*pGPIOAModeReg |= maskSet;
 800023a:	693b      	ldr	r3, [r7, #16]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	431a      	orrs	r2, r3
 8000242:	693b      	ldr	r3, [r7, #16]
 8000244:	601a      	str	r2, [r3, #0]
	for(;;){
		*pGPIOAOutDataReg  ^= 0x00000020;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f083 0220 	eor.w	r2, r3, #32
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	601a      	str	r2, [r3, #0]
		for(uint32_t i=0; i<500000;i++){
 8000252:	2300      	movs	r3, #0
 8000254:	61fb      	str	r3, [r7, #28]
 8000256:	e005      	b.n	8000264 <main+0x60>
			i++;
 8000258:	69fb      	ldr	r3, [r7, #28]
 800025a:	3301      	adds	r3, #1
 800025c:	61fb      	str	r3, [r7, #28]
		for(uint32_t i=0; i<500000;i++){
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3301      	adds	r3, #1
 8000262:	61fb      	str	r3, [r7, #28]
 8000264:	69fb      	ldr	r3, [r7, #28]
 8000266:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <main+0x9c>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d9f5      	bls.n	8000258 <main+0x54>
		}
		*pGPIOAOutDataReg  ^=  0x00000020;
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f083 0220 	eor.w	r2, r3, #32
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	601a      	str	r2, [r3, #0]
		for(uint32_t i=0; i<500000;i++){
 8000278:	2300      	movs	r3, #0
 800027a:	61bb      	str	r3, [r7, #24]
 800027c:	e005      	b.n	800028a <main+0x86>
			i++;
 800027e:	69bb      	ldr	r3, [r7, #24]
 8000280:	3301      	adds	r3, #1
 8000282:	61bb      	str	r3, [r7, #24]
		for(uint32_t i=0; i<500000;i++){
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	3301      	adds	r3, #1
 8000288:	61bb      	str	r3, [r7, #24]
 800028a:	69bb      	ldr	r3, [r7, #24]
 800028c:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <main+0x9c>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d9f5      	bls.n	800027e <main+0x7a>
		*pGPIOAOutDataReg  ^= 0x00000020;
 8000292:	e7d8      	b.n	8000246 <main+0x42>
 8000294:	40023830 	.word	0x40023830
 8000298:	40020000 	.word	0x40020000
 800029c:	40020014 	.word	0x40020014
 80002a0:	0007a11f 	.word	0x0007a11f

080002a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490e      	ldr	r1, [pc, #56]	; (80002e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0b      	ldr	r2, [pc, #44]	; (80002ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0b      	ldr	r4, [pc, #44]	; (80002f0 <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ce:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002d2:	f000 f811 	bl	80002f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d6:	f7ff ff95 	bl	8000204 <main>

080002da <LoopForever>:

LoopForever:
    b LoopForever
 80002da:	e7fe      	b.n	80002da <LoopForever>
  ldr   r0, =_estack
 80002dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e8:	08000360 	.word	0x08000360
  ldr r2, =_sbss
 80002ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f0:	2000001c 	.word	0x2000001c

080002f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f4:	e7fe      	b.n	80002f4 <ADC_IRQHandler>
	...

080002f8 <__libc_init_array>:
 80002f8:	b570      	push	{r4, r5, r6, lr}
 80002fa:	4e0d      	ldr	r6, [pc, #52]	; (8000330 <__libc_init_array+0x38>)
 80002fc:	4c0d      	ldr	r4, [pc, #52]	; (8000334 <__libc_init_array+0x3c>)
 80002fe:	1ba4      	subs	r4, r4, r6
 8000300:	10a4      	asrs	r4, r4, #2
 8000302:	2500      	movs	r5, #0
 8000304:	42a5      	cmp	r5, r4
 8000306:	d109      	bne.n	800031c <__libc_init_array+0x24>
 8000308:	4e0b      	ldr	r6, [pc, #44]	; (8000338 <__libc_init_array+0x40>)
 800030a:	4c0c      	ldr	r4, [pc, #48]	; (800033c <__libc_init_array+0x44>)
 800030c:	f000 f818 	bl	8000340 <_init>
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	10a4      	asrs	r4, r4, #2
 8000314:	2500      	movs	r5, #0
 8000316:	42a5      	cmp	r5, r4
 8000318:	d105      	bne.n	8000326 <__libc_init_array+0x2e>
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000320:	4798      	blx	r3
 8000322:	3501      	adds	r5, #1
 8000324:	e7ee      	b.n	8000304 <__libc_init_array+0xc>
 8000326:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800032a:	4798      	blx	r3
 800032c:	3501      	adds	r5, #1
 800032e:	e7f2      	b.n	8000316 <__libc_init_array+0x1e>
 8000330:	08000358 	.word	0x08000358
 8000334:	08000358 	.word	0x08000358
 8000338:	08000358 	.word	0x08000358
 800033c:	0800035c 	.word	0x0800035c

08000340 <_init>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr

0800034c <_fini>:
 800034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034e:	bf00      	nop
 8000350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000352:	bc08      	pop	{r3}
 8000354:	469e      	mov	lr, r3
 8000356:	4770      	bx	lr
